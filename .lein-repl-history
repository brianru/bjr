(use 'brian.repl)
(start-server)
(use hiccup.core)
(use hiccup.core :refer :all)
(use 'hiccup.core)
(doc include-css)
(find-doc "css")
(find-doc "js")
(use 'brian.repl)
(start-server)
(use 'brian.models.db)
(quit)
(use 'brian.models.db)
csv
db
csv/parse-csv
parse-csv
brian.models.db/csv/parse-csv
(find-doc "csv")
clojure-csv.core/parse-csv
(slurp "resources/shelfari_data.tsv")
(clojure-csv.core/parse-csv (slurp "resources/shelfari_data.tsv") {:delimiter "\\t"})
(clojure-csv.core/parse-csv (slurp "resources/shelfari_data.tsv") :delimiter "\\t")
(clojure-csv.core/parse-csv (slurp "resources/shelfari_data.tsv") :delimiter \t)
(def data (clojure-csv.core/parse-csv (slurp "resources/shelfari_data.tsv") :delimiter \t))
data
(nth data 0)
(def data (clojure-csv.core/parse-csv (slurp "resources/shelfari_data.tsv") :delimiter \tab))
(nth data 0)
(nth data 2)
(nth data 3)
(nth data 4)
(nth data 5)
(map {} (range 10))
dict
(map hash-map (range 10))
hash-map
(hash-map)
(map #(hash-map) (range 10))
(map #(hash-map %) (range 10))
(map #(hash-map % &) (range 10))
(map #(hash-map % %) (range 10))
(mapv #(hash-map % %) (range 10))
(def hdrs (first data))
(def rows (rest data))
(def res (mapv #(zipmap hdrs %) rows))
res
(first res)
(nth res 24)
(start-server)
(use 'brian/core)
(use 'brian.repl)
(start-server)
(stop-server)
(start-server)
(quit)
(use 'brian.repl)
(start-server)
(quit)
(use 'brian.repl)
(start-server)
(doc partial)
(slurp "/resources/shelfari_data.tsv")
(slurp "resources/shelfari_data.tsv")
(use 'brian.models.db)
(cons 3 [1 2 3]])
(cons 3 [1 2 3])
(def a {:a 2 :b 2 :c 3})
a
(:a 3)
(:a a)
(#{:a :b} a)
(#{:a} a)
(#(:a) a)
(doc select-keys)
(select-keys a [:a :c :f])
parse-tabular-data
(find-doc "parse-tab")
(find "parse-tab")
(doc brian.models.db/parse-tabular-data)
brian.models.db/parse-tabular-data
get-tabular-data
brian.models.db/parse-tabular-data
brian.models.db/get-tabular-data
(require 'brian.models.db)
parse-tabular-data
get-tabular-data
'brian.models.db
brian.models.db
(quit)
(doc use)
(use 'brian.models.db)
db-base
get-tabular-data
(def data (get-tabular-data "resources/shelfari_data.tsv" \tab))
(nth data 20)
(nth data 22)
(nth data 25)
(quit)
db
(use 'brian.models/db)
(use 'brian.models.db)
db
(database-counts)
(quit)
(use 'brian.repl)
(start-server)
(stop-server)
(quit)
(use 'brian.repl)
(start-server)
(stop-server
)
(quit)
(use 'brian.repl)
(start-server)
(stop-server)
(quit)
(use 'brian.repl)
(start-server)
(stop-server)
(quit)
(use 'brian.routes.api)
(books)
(read (books))
api-routes
(api-routes)
(doc api-routes)
(doc db)
(type db)
db
(use 'brian.models.db)
db
(type db)
q
(doc spit)
(spit "out.txt" (pr db))
(spit "out.txt" db)
(def a (read (slurp "out.txt")))
(def a (slurp "out.txt"))
a
(load-file "out.txt")
(doc print)
(print db)
(doc defmethod)
q
(use 'fogus.datalog.bacwn)
q
(doc q)
(start-server)
(use 'brian.repl)
(start-server)
(use 'brian.models.db)
db
q
?-
<-
(doc ?-)
(use 'fogus.datalog.bacwn.macros)
(doc ?-)
q
(doc q)
(q (?- :books :book/title ?title) db nil nil)
build-work-plan
(load 'brian.models.db)
(use 'brian.models.db)
rules
(stop-server)
(quit)
(use 'brian.models.db)
rules
wp-1
db
(run-work-plan wp-1 db {})
(use 'fogus.datalog.bacwn)
(run-work-plan wp-1 db {})
(def res (run-work-plan wp-1 db {})
)
(nth res 40)
size
len
length
(find-doc "length")
(find-doc "count")
(count res)
(quit)
(use 'brian.models.db)
books-read
(set! *print-length* 10)
books-read
(doc contains?)
(find-doc "string contains")
(find-doc "string" "contains")
(find-doc "contains")
(quit)
(find-doc "split")
(> 1 2 3)
(>  3 2 1)
(find-doc "first n")
(find-doc "sort")
(quit)
(use 'brian.routes.api)
(quit)
(use 'brian.routes.api)
(books-read)
(books-read-by-year)
(find-doc "last n")
(recent-books 5)
(doc sort-by)
(quit)
(use 'brian.routes.api)
(recent-books 5)
(recent-books 1)
(recent-books 100)
(recent-books 20)
(quit)
(use 'brian.routes.api)
db
brian.models.db/db
(books-read)
(books-read-by-year)
(def b (books-read))
(take 1 b)
(def b (first (books-read)))
b
(:when b)
(require '[clj-time.format :as f])
f
f/formatter
(f/parse (f/formatter "MM/dd/yyyy") (:when b))
t/year
year
(require 'clj-time.core :as t)
(require ['clj-time.core :as t])
(require [clj-time.core :as t])
t
(use [clj-time.core :as t])
(use 'clj.time.core)
(doc defn)
(doc defn-)
(quit)
(use 'brian.routes.api)
(parse-year "12/02/2012")
(books-read-by-year)
(defn books-read-by-year
  "Partition books read by year read."
  []
  (let [res (books-read)
        parts (partition-by (comp parse-year :when) res)]
    (println parts)
    (map count parts)))
(load)
(doc load)
(books-read-by-year)
(load 'brian.routes.api)
(load brian.routes.api)
(find-doc "reload")
(use 'brian.routes.api :reload)
(doc use)
(books-read-by-year)
(books-read)
(count (books-read))
(count (partition-by #(parse-year (:when %)) (books-read)))
(partition-by #(parse-year (:when %)) (books-read))
(doc partition-by)
(group-by #(parse-year (:when %)) (books-read))
(use 'brian.routes.api :reload)
(books-read-by-year)
(use 'brian.routes.api :reload)
(books-read-by-year)
(doc second)
(use 'brian.routes.api :reload)
(books-read-by-year)
(use 'brian.routes.api :reload)
(books-read-by-year)
(use 'brian.routes.api :reload)
(books-read-by-year)
(keyword 42)
(use 'brian.routes.api :reload)
(books-read-by-year)
(use 'brian.routes.api :reload)
(books-read-by-year)
(use 'brian.routes.api :reload)
(books-read-by-year)
(use 'brian.repl)
(start-server)
(use 'brian.routes.api :reload)
(books-in-last (t/months 12))
(books-in-last (months 12))
(use 'clj-time.core)
(books-in-last (months 12))
months
(months 12)
(use 'brian.routes.api :reload)
(quit)
(use 'brian.repl)
(start-server)
(stop-server)
(use 'brian.repl)
(start-server)
(quit)
(use 'brian.repl)
(start-server)
(quit)
(use 'brian.repl)
(start-server)
