(use 'brian.repl)
(start-server)
(use hiccup.core)
(use hiccup.core :refer :all)
(use 'hiccup.core)
(doc include-css)
(find-doc "css")
(find-doc "js")
(use 'brian.repl)
(start-server)
(use 'brian.models.db)
(quit)
(use 'brian.models.db)
csv
db
csv/parse-csv
parse-csv
brian.models.db/csv/parse-csv
(find-doc "csv")
clojure-csv.core/parse-csv
(slurp "resources/shelfari_data.tsv")
(clojure-csv.core/parse-csv (slurp "resources/shelfari_data.tsv") {:delimiter "\\t"})
(clojure-csv.core/parse-csv (slurp "resources/shelfari_data.tsv") :delimiter "\\t")
(clojure-csv.core/parse-csv (slurp "resources/shelfari_data.tsv") :delimiter \t)
(def data (clojure-csv.core/parse-csv (slurp "resources/shelfari_data.tsv") :delimiter \t))
data
(nth data 0)
(def data (clojure-csv.core/parse-csv (slurp "resources/shelfari_data.tsv") :delimiter \tab))
(nth data 0)
(nth data 2)
(nth data 3)
(nth data 4)
(nth data 5)
(map {} (range 10))
dict
(map hash-map (range 10))
hash-map
(hash-map)
(map #(hash-map) (range 10))
(map #(hash-map %) (range 10))
(map #(hash-map % &) (range 10))
(map #(hash-map % %) (range 10))
(mapv #(hash-map % %) (range 10))
(def hdrs (first data))
(def rows (rest data))
(def res (mapv #(zipmap hdrs %) rows))
res
(first res)
(nth res 24)
(start-server)
(use 'brian/core)
(use 'brian.repl)
(start-server)
(stop-server)
(start-server)
(quit)
(use 'brian.repl)
(start-server)
(quit)
(use 'brian.repl)
(start-server)
(doc partial)
(slurp "/resources/shelfari_data.tsv")
(slurp "resources/shelfari_data.tsv")
(use 'brian.models.db)
(cons 3 [1 2 3]])
(cons 3 [1 2 3])
(def a {:a 2 :b 2 :c 3})
a
(:a 3)
(:a a)
(#{:a :b} a)
(#{:a} a)
(#(:a) a)
(doc select-keys)
(select-keys a [:a :c :f])
parse-tabular-data
(find-doc "parse-tab")
(find "parse-tab")
(doc brian.models.db/parse-tabular-data)
brian.models.db/parse-tabular-data
get-tabular-data
brian.models.db/parse-tabular-data
brian.models.db/get-tabular-data
(require 'brian.models.db)
parse-tabular-data
get-tabular-data
'brian.models.db
brian.models.db
(quit)
(doc use)
(use 'brian.models.db)
db-base
get-tabular-data
(def data (get-tabular-data "resources/shelfari_data.tsv" \tab))
(nth data 20)
(nth data 22)
(nth data 25)
(quit)
db
(use 'brian.models/db)
(use 'brian.models.db)
db
(database-counts)
(quit)
(use 'brian.repl)
(start-server)
(stop-server)
(quit)
(use 'brian.repl)
(start-server)
(stop-server
)
(quit)
(use 'brian.repl)
(start-server)
(stop-server)
(quit)
(use 'brian.repl)
(start-server)
(stop-server)
(quit)
(use 'brian.routes.api)
(books)
(read (books))
api-routes
(api-routes)
(doc api-routes)
(doc db)
(type db)
db
(use 'brian.models.db)
db
(type db)
q
(doc spit)
(spit "out.txt" (pr db))
(spit "out.txt" db)
(def a (read (slurp "out.txt")))
(def a (slurp "out.txt"))
a
(load-file "out.txt")
(doc print)
(print db)
(doc defmethod)
